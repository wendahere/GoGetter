function doGet() {
  return HtmlService.createHtmlOutputFromFile('Index').setTitle('Index');
}

Array.prototype.contains = function(v) {
  for (var i = 0; i < this.length; i++) {
    if (this[i] === v) return true;
  }
  return false;
};

Array.prototype.unique = function() {
  var arr = [];
  for (var i = 0; i < this.length; i++) {
    if (!arr.contains(this[i])) {
      arr.push(this[i]);
    }
  }
  return arr;
}

function getCol(matrix, col){
  var column = [];
  for(var i=0; i<matrix.length; i++){
    column.push(matrix[i][col]);
  }
  return column;
}
  
function findGoogleSpreadsheetWithName(spreadSheetName){
//Finding the spreadsheet with a name
//And output the spreadsheet ID
  var files = DriveApp.searchFiles(
    'mimeType = "' + MimeType.GOOGLE_SHEETS + '"');
  
  while (files.hasNext()) {
    var spreadsheet = SpreadsheetApp.open(files.next());
    
    if (spreadSheetName == spreadsheet.getName()){
      var spreadSheetIO = spreadsheet.getId();
    }
  }  
  return spreadSheetIO;
}

function getOpenSpreadSheetFromName(spreadSheetName){
  return SpreadsheetApp.openById(findGoogleSpreadsheetWithName(spreadSheetName));
}

function getArrayofDataFromSpreadSheet(spreadSheetName, sheetName){ 
  return getArrayofDataFromSheet(getOpenSpreadSheetFromName(spreadSheetName), sheetName);
}

function getArrayofDataFromSheet(spreadSheet, sheetName){
  var sheet = spreadSheet.getSheetByName(sheetName);
  return sheet.getDataRange();
}

function countSheetRowNumber(spreadSheetName, sheetName, columnNumber){
  var dataArray = getArrayofDataFromSheet(getOpenSpreadSheetFromName(spreadSheetName),sheetName);
  
  for(var i = 1; i < dataArray.getNumRows(); i++) {
    if (dataArray.getCell(i, columnNumber) == "")
    {
    break;
  }
  }
  return i;
  
  //var openSpreadSheet = getOpenSpreadSheetFromName(spreadSheetName);
  
  //var sheet = openSpreadSheet.getSheetByName(sheetName);
  
  //return sheet.getLastRow();
}

function countSheetColumnNumber(spreadSheetName, sheetName, rowNumber){
  var dataArray = getArrayofDataFromSheet(getOpenSpreadSheetFromName(spreadSheetName),sheetName);
 
  for(var i = 1; i < dataArray.getNumColumns(); i++) {
    if (dataArray.getCell(rowNumber,i) == "")
    {
    break;
  }
  }
  return i;
  
  //var openSpreadSheet = getOpenSpreadSheetFromName(spreadSheetName);
  
  //var sheet = openSpreadSheet.getSheetByName(sheetName);
  
  //return sheet.getLastColumn();
}

function findArrayOfColumn(spreadSheetName, sheetName, columnNo){
  var data = getArrayofDataFromSpreadSheet(spreadSheetName, sheetName);
  
  var columnArray = new Array();
  
  var i;
  
  for (i = 1; i < countSheetRowNumber(spreadSheetName, sheetName, columnNo); i++){
    columnArray.push(data.getCell(i + 1, columnNo).getValue());
  }
  
  return columnArray
}

function findArrayOfRow(spreadSheetName, sheetName, rowNo){
  var data = getArrayofDataFromSpreadSheet(spreadSheetName, sheetName);
  
  var rowArray = new Array();
  
  var i;
  
  for (i = 1; i < countSheetColumnNumber(spreadSheetName, sheetName, rowNo); i++){
    rowArray.push(data.getCell(rowNo, i + 1).getValue());
  }
  
  return rowArray
}

function getNames(){
  var i;
  
  var nameColumns = findArrayOfColumn("database", "Class A 2020", 2);
  
  for (i = 1; i < nameColumns.length ; i++){
   Logger.log(nameColumns[i]); 
  }
  
  return nameColumns
}

function getClassesOld(spreadSheetName, sheetName){ //Search all unique classes and return an array of them
  var classColumnNumber = 3;
  
  var classColumns = findArrayOfColumn(spreadSheetName, sheetName, classColumnNumber);
  
  return classColumns.unique(); 
}

function getClasses(spreadSheetName, year){ //Search all unique classes and return an array of them
  var classRowNumber = 1;
  var functionalProgramSheet = "DO NOT DELETE";
  
  var yearArray = findArrayOfRow(spreadSheetName, functionalProgramSheet, classRowNumber); 

  for (var i = 0; i < yearArray.length; i++) {   
      if (yearArray[i] == year) {
        break;
      }
    }
  var classArray = findArrayOfColumn(spreadSheetName, functionalProgramSheet, i + 2)
  return classArray;
}

function Function(value){
  Logger.log(getClasses("database","Year 2"));
}